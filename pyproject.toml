[tool.poetry]
name = "todo"
version = "0.1.0"
description = "FastAPI Todo example"
authors = ["Roger Camargo <huogerac@gmail.com>"]
readme = "README.md"
packages = [{include = "todo"}]
exclude = [
    "postgres_data",
    "postgres_data_test",
]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.111.0"
pydantic-settings = "^2.1"
uvicorn = "^0.22.0"
sqlalchemy = "^2.0.30"
alembic = "^1.13.1"
psycopg2-binary = "^2.9.9"
ipython = "^8.24.0"
typer = "^0.12.3"
rich = "^13.7.1"
watchfiles = "^0.21.0"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
bcrypt = "4.0.1"

[tool.poetry.group.dev.dependencies]
black = "^24.4.2"
httpx = "^0.27.0"
pytest = "^8.2.0"
pytest-cov = "^5.0.0"
pytest-dotenv = "^0.5.2"
mock = "^5.1.0"
flake8-pyproject = "^1.2.3"
taskipy = "^1.12.2"

[tool.poetry.scripts]
cli = "todo.cli:main"

[tool.taskipy.tasks]
activeenv = {cmd = "poetry shell", help = "Active the virtualenv."}
format = {cmd = "black todo", help = "Format the code."}
lint = {cmd = "flake8 .", help = "Run the linter to check PEP8."}
test = {cmd = "pytest", help = "Run the tests and fail in the first one."}
test-cov = {cmd = "pytest --cov=todo", help = "Run the tests and give us the test coverage report."}
runserver = {cmd = "WATCHFILES_IGNORE_PERMISSION_DENIED=0 uvicorn todo.main:app --host 0.0.0.0 --port 8000 --reload", help = "Run the fastapi server"}
shell = {cmd = "poetry run cli shell", help = "Run the interactive shell"}
shelldb = {cmd = "docker compose exec postgres psql --username=todo --dbname=db_todo", help = "Run the db shell"}
migrate = {cmd = "alembic upgrade head", help = "Run the migrations to update the database"}
makemigrations = {cmd = "alembic revision --autogenerate", help = "Detect models changes and create a new migration. Use -m 'message'"}
clean = {cmd = "find {pyc} && find {pycache} && find {thumbs} && find {root}", help = "Clear the project off all files that are dispensables.", use_vars = true}
up = {cmd = "docker compose up -d --build", help = "Up the services containers."}
down = {cmd = "docker compose down", help = "Down the services containers."}
resetdb = {cmd = "docker-compose down -v", help = "Down the services containers and delete the db volume"}
createuser = {cmd = "poetry run cli create-user", help = "Create a new user"}

[tool.black]
line-length = 120
target_version = ['py311']
include = '\.pyi?$'

[tool.flake8]
max-line-length = 120
exclude = [
    '.venv/', 'migrations', '.git', '__pycache__', 'postgres_data', 'postgres_data_test', 'tests', 
]

[tool.pytest.ini_options]
addopts = "--exitfirst --showlocals --tb=auto -vv --ignore=postgres_data --ignore=postgres_data_test"
python_files = [
    "test*.py",
    "*tests.py",
]
env_override_existing_values = 1
env_files = [
    ".env",
    ".env.test",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
